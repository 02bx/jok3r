[general]
tools_categories = network, waf_detection, ssl_checking, server_fingerprinting, server_checking, webapp_fingerprinting, webapp_checking, basic_webscanner, cms_scanner, resources_discovery, advanced_webscanner
server_list = apache, iis, tomcat, jboss, weblogic, websphere, jenkins, domino
techno_list = php, asp, java, coldfusion
cms_list = wordpress, joomla, drupal, mambo, silverstripe, vbulletin

# Add serialiator


#########################################################################################
# Network
#########################################################################################
[usemulti_dig]
name = dig
tool_ref_name = dig
category = network
description = DNS lookup
command = dig [HOST]

[usemulti_traceroute]
name = traceroute
tool_ref_name = traceroute
category = network
description = Network traceroute
command = traceroute [IP]

[tool_halberd]
name = halberd
category = network
description = HTTP load balancer detector
command = ./build/scripts-2.7/halberd -v [URL]
install = git clone https://github.com/jmbr/halberd.git . && sudo python setup.py install
update = git pull && sudo python setup.py install


#########################################################################################
# WAF Detection
#########################################################################################
[tool_wafw00f]
name = wafw00f
category = waf_detection
description = Identify and fingerprint WAF products protecting a website
command = ./build/scripts-2.7/wafw00f -v -a [URL]
install = git clone https://github.com/sandrogauci/wafw00f.git . && sudo python setup.py install
update = git pull && sudo python setup.py install

[tool_wafpass]
name = wafpass
category = waf_detection
description = Analysing parameters with all payloads bypass methods, aiming at benchmarking security solutions like WAF
command = python3 wafpass.py -u [URL]/
install = git clone https://github.com/wafpassproject/wafpass.git .
update = git pull


#########################################################################################
# SSL/TLS Checking
#########################################################################################
[tool_testssl]
name = testssl.sh
category = ssl_checking
description = Testing TLS/SSL encryption
command = ./testssl.sh [URL]
install = git clone https://github.com/drwetter/testssl.sh.git .
update = git pull
ssl_specific = True

[tool_sslyze]
name = Sslyze
category = ssl_checking
description = SSL/TLS Scanner
command = python -m sslyze --regular --certinfo [HOST]:[PORT]
install = git clone https://github.com/nabla-c0d3/sslyze.git . && sudo apt-get install python-dev && sudo pip install -r requirements.txt --target ./lib && sudo python setup.py install
update = git pull && sudo pip install -r requirements.txt --target ./lib
ssl_specific = True

[tool_sslscan]
name = Sslscan
category = ssl_checking
description = SSL/TLS Scanner
command = sslscan [HOST]:[PORT]
ssl_specific = True

#########################################################################################
# Server Fingerprinting
#########################################################################################
[tool_httprint]
name = httprint
category = server_fingerprinting
description = Web server fingerprinting tool (outdated - last upd: 2005)
command = ./httprint -P0 -h [HOST]  -s ./signatures.txt -P0
install = wget http://www.net-square.com/_assets/httprint_linux_301.zip && unzip -j httprint_linux_301.zip && rm httprint_linux_301.zip

[tool_clusterd]
name = clusterd
category = server_fingerprinting
description = Application server attack toolkit (JBoss, ColdFusion, Weblogic, Tomcat, Railo, Axis2, Glassfish)
command = python clusterd.py --fingerprint -i [HOST] -p [PORT] [SSL option="--ssl"]
install = git clone https://github.com/hatRiot/clusterd.git .
update = git pull

[tool_domiowned]
name = Domi-owned
category = server_fingerprinting
description = IBM/Lotus Domino server fingerprinting
command = python domi-owned.py fingerprint [URL]
install = sudo pip install simple-requests && git clone https://github.com/coldfusion39/domi-owned.git .
update = git pull
server_specific = domino


#########################################################################################
# Server Checking
#########################################################################################
[usemulti_nmap_http_recon]
name = Nmap_HTTP_scripts
tool_ref_name = nmap
category = server_checking
description = Nmap HTTP scripts
command = sudo nmap -sV -Pn -vv -p [PORT] --script-args=unsafe=1 --script='http* AND NOT broadcast AND NOT dos AND NOT http-slow* AND NOT http-comment*' --stats-every 10s -oN [OUTPUT] [HOST]

[tool_gethead]
name = gethead
category = server_checking
description = Identifies security vulnerabilities and the lack of protection in HTTP Headers
command = python gethead.py [URL]
install = git clone https://github.com/httphacker/gethead .
update = git pull

[tool_hsecscan]
name = hsecscan
category = server_checking
description =  A security scanner for HTTP response headers
command = python hsecscan.py -i -u [URL]
install = git clone https://github.com/riramar/hsecscan .
update = git pull

[tool_iisshortnamescanner]
name = IIS-Shortname-Scanner
category = server_checking
description = Scanner for IIS short filename (8.3) disclosure vulnerability
command = java -jar iis_shortname_scanner.jar 2 20 [URL]
install = git clone https://github.com/irsdl/IIS-ShortName-Scanner.git .
update = git pull
server_specific = iis

[usemulti_msf_iis_internal_ip]
name = MSF_IIS_internal_ip
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - Microsoft IIS HTTP Internal IP Disclosure - auxiliary/scanner/http/iis_internal_ip
command = sudo msfconsole -x "use auxiliary/scanner/http/iis_internal_ip; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
server_specific = iis

[tool_davscan]
name = davscan
category = server_checking
description = Fingerprints servers, finds exploits, scans WebDAV
command = python davscan.py -o [OUTPUT] [URL]
install = git clone https://github.com/Graph-X/davscan.git .
update = git pull
webdav_specific = True

[usemulti_msf_webdav_scanner]
name = MSF_WebDAV_scanner
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - HTTP WebDAV Scanner - auxiliary/scanner/http/webdav_scanner
command = sudo msfconsole -x "use auxiliary/scanner/http/webdav_scanner; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
webdav_specific = True

[usemulti_msf_webdav_internal_ip]
name = MSF_WebDAV_internal_ip
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - HTTP WebDAV Internal IP Scanner - auxiliary/scanner/http/webdav_internal_ip
command = sudo msfconsole -x "use auxiliary/scanner/http/webdav_internal_ip; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
webdav_specific = True

[usemulti_msf_webdav_website_content]
name = MSF_WebDAV_website_content
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - HTTP WebDAV Website Content Scanner - auxiliary/scanner/http/webdav_website_content
command = sudo msfconsole -x "use auxiliary/scanner/http/webdav_website_content; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
webdav_specific = True

[usemulti_msf_http_put]
name = MSF_HTTP_PUT
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - HTTP Writable Path PUT File Access - auxiliary/scanner/http/http_put
command = sudo msfconsole -x "use auxiliary/scanner/http/http_put; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"

[tool_shocker]
name = shocker
category = server_checking
description = A tool to find and exploit servers vulnerable to Shellshock
command = python shocker.py --Host [HOST] --port [PORT] [SSL option="--ssl"]
install = git clone https://github.com/nccgroup/shocker.git .
update = git pull

[usemulti_msf_tomcat_enum]
name = MSF_Tomcat_enum
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - Apache Tomcat User Enumeration - auxiliary/scanner/http/tomcat_enum
command = sudo msfconsole -x "use auxiliary/scanner/http/tomcat_enum; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
server_specific = tomcat

[usemulti_msf_tomcat_mgr_login]
name = MSF_Tomcat_mgr_login
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - Apache Tomcat User Enumeration - auxiliary/scanner/http/tomcat_mgr_login
command = sudo msfconsole -x "use auxiliary/scanner/http/tomcat_mgr_login; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
server_specific = tomcat

[tool_jexboss]
name = JexBoss
category = server_checking
description = Jboss verify and EXploitation Tool
command = python jexboss.py -host [URL]
install = git clone https://github.com/joaomatosf/jexboss.git . && sudo pip install -r requires.txt
update = git pull
server_specific = jboss, tomcat, jenkins

[usemulti_msf_jboss_vulnscan]
name = MSF_JBoss_vulnscan
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - JBoss Vulnerability Scanner - auxiliary/scanner/http/jboss_vulnscan
command = sudo msfconsole -x "use auxiliary/scanner/http/jboss_vulnscan; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
server_specific = jboss

[usemulti_msf_jboss_status]
name = MSF_JBoss_status
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - JBoss Status Servlet Information Gathering - auxiliary/scanner/http/jboss_status
command = sudo msfconsole -x "use auxiliary/scanner/http/jboss_status; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
server_specific = jboss

[usemulti_msf_jenkins_enum]
name = MSF_Jenkins_enum
tool_ref_name = metasploit
category = server_checking
description = Metasploit module - Jenkins-CI Enumeration - auxiliary/scanner/http/jenkins_enum
command = sudo msfconsole -x "use auxiliary/scanner/http/jenkins_enum; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
server_specific = jenkins

[tool_loubia]
name = Loubia
category = server_checking
description = Python script to exploit java unserialize on t3 (Weblogic) - support t3s. Try to deploy a webshell
command = python loubia.py [IP] [PORT] [SSL option="-s"] -w -v
install = git clone https://github.com/metalnas/loubia .
update = git pull
server_specific = weblogic



#########################################################################################
# Web Application Fingerprinting
#########################################################################################
[tool_whatweb]
name = WhatWeb
category = webapp_fingerprinting
description = Identify CMS, blogging platforms, JS libraries, Web servers
command = ./whatweb -v -a 4 [URL]
install = git clone https://github.com/urbanadventurer/WhatWeb.git .
update = git pull

[tool_wig]
name = Wig
category = webapp_fingerprinting
description = Web app information gathering tool, which can identify numerous CMS and other administrative applications
command = python3 ./wig.py -q -a -t 2 -v [URL]
install = git clone https://github.com/jekyc/wig.git . && sudo apt-get install python3-pip && sudo python3 setup.py install
update = git pull && sudo python3 setup.py install

[tool_blindelephant]
name = BlindElephant
category = webapp_fingerprinting
description = Attempts to discover versions of web applications by comparing static files at known locations (not maintained)
command = python src/build/scripts-2.7/BlindElephant.py [URL] guess
install = git clone https://github.com/lokifer/BlindElephant.git . && cd src && sudo python setup.py install
update = git pull && cd src && sudo python setup.py install


#########################################################################################
# Web Application Checking
#########################################################################################
[usemulti_changeme_http]
name = Changeme_http
tool_ref_name = changeme
category = webapp_checking
description = Default credentials scanning for web-based interfaces
command = python changeme.py -v --target [IP]:[PORT]

[tool_yasuo]
name = yasuo
category = webapp_checking
description = A ruby script that scans for vulnerable and exploitable 3rd-party web applications on a network
command = sudo ruby yasuo.rb -p [PORT] -r [HOST] --brute all
install = git clone https://github.com/0xsauby/yasuo.git . && sudo gem install ruby-nmap net-http-persistent mechanize text-table sqlite3
update = git pull


#########################################################################################
# Basic Web Scanner
#########################################################################################
[tool_websorrow]
name = Web-Sorrow
category = basic_webscanner
description = A misconfig, version detection, and server enumeration scanning tool
command = perl ./Wsorrow.pl -host [HOST]:[PORT] -intense
install = git clone https://github.com/Kizoku-Dev/web-sorrow.git .
update = git pull

[tool_nikto]
name = Nikto
category = basic_webscanner
description = Scan web server for known vulnerabilities
command = nikto -host [HOST] -port [PORT] [SSL option="-ssl"]
install = nikto -Version
update = nikto -update


#########################################################################################
# CMS Scanner
#########################################################################################
[tool_cmsexplorer]
name = cms-explorer
category = cms_scanner
description = Brute-force guess the plugins and themes installed in a CMS (Wordpress, Drupal, Joomla, Mambo)
command = perl ./cms-explorer.pl -url [URL] -v 3
install = git clone https://github.com/FlorianHeigl/cms-explorer.git .
update = git pull
cms_specific = wordpress, drupal, joomla, mambo

[tool_cmsmap]
name = CMSmap
category = cms_scanner
description = Simple CMS vulnerability scanner (Wordpress, Drupal, Joomla)
command = python ./cmsmap.py -v -F [CMS wordpress="-f W" joomla="-f J" drupal="-f D"] -t [URL]
install = git clone https://github.com/Dionach/CMSmap.git .
update = python ./cmsmap.py --update A
cms_specific = wordpress, drupal, joomla

[tool_drupalscan]
name = DrupalScan
category = cms_scanner
description = Simple Drupal scanner to enumerate modules and get the drupal version (outdated - 2012)
command = ./bin/DrupalScan -u [URL]
install = git clone https://github.com/rverton/DrupalScan.git . && sudo gem install DrupalScan
update = git pull && sudo gem install DrupalScan
cms_specific = drupal

[tool_dpscan]
name = DPscan
category = cms_scanner
description = Modules enumerator for Drupal
command = python DPScan.py [URL]
install = git clone https://github.com/cervoise/DPScan.git .
update = git pull
cms_specific = drupal

[tool_droopescan]
name = Droopescan
category = cms_scanner
description = A plugin-based scanner that aids identifying issues in Drupal, Wordpress, SilverStripe, Joomla (partial only)
command = ./droopescan scan [CMS drupal="drupal" wordpress="wordpress" joomla="joomla" silverstripe="silverstripe" default="drupal"] -u [URL]
install = git clone https://github.com/droope/droopescan.git . && sudo pip install -r requirements.txt
update = git pull && sudo pip install -r requirements.txt
cms_specific = drupal, wordpress, silverstripe, joomla

[usemulti_msf_drupal_views_userenum]
name = MSF_Drupal_Views_Userenum
tool_ref_name = metasploit
category = cms_scanner
description = Metasploit module - Drupal Views user enumeration - auxiliary/scanner/http/drupal_views_user_enum
command = sudo msfconsole -x "use auxiliary/scanner/http/drupal_views_user_enum; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
cms_specific = drupal

[tool_wpscan]
name = WPscan
category = cms_scanner
description = Black box WordPress vulnerability scanner
command = ruby wpscan.rb -u [URL] -v --enumerate "u[1-50],ap,tt,t"
install = sudo apt-get install git ruby ruby-dev libcurl4-openssl-dev make zlib1g-dev && git clone https://github.com/wpscanteam/wpscan.git . && sudo gem install bundler && bundle install --without test --path vendor/bundle
update = ruby wpscan.rb --update
cms_specific = wordpress

[tool_plecost]
name = plecost
category = cms_scanner
description = Black box Wordpress vulnerabilities finder (similar with WPScan - try using both to compare results)
command = python3 plecost_lib/plecost.py -v --concurrency 5 -w ./plecost_lib/resources/plugin_list_1000.txt [URL]
install = git clone https://github.com/iniqua/plecost.git . && sudo python3 setup.py install && python3 plecost_lib/plecost.py --update-all
update = python3 plecost_lib/plecost.py --update-all
cms_specific = wordpress

[tool_joomlavs]
name = Joomlavs
category = cms_scanner
description = A black
command = ruby joomlavs.rb -v -u [URL] --scan-all
install = git clone https://github.com/rastating/joomlavs.git . && sudo gem install bundler && bundle install
update = git pull && sudo gem install bundler && bundle install
cms_specific = joomla

[tool_joomscan]
name = Joomscan-Owasp
category = cms_scanner
description = OWASP Joomla Security scanner
command = perl joomscan.pl -u [URL] -vu
install = git clone https://github.com/rsrdesarrollo/joomscan-owasp.git .
update = perl joomscan.pl update
cms_specific = joomla

[tool_joomlascan]
name = Joomla_Scan
category = cms_scanner
description = Find the components installed in Joomla CMS
command = python joomlascan.py -u [URL]
install = git clone https://github.com/drego85/Joomla_Scan.git .
update = git pull
cms_specific = joomla

[usemulti_msf_joomla_version]
name = MSF_Joomla_Version
tool_ref_name = metasploit
category = cms_scanner
description = Metasploit module - Scans a Joomla install for info about the underlying OS and Joomla version - auxiliary/scanner/http/joomla_version
command = sudo msfconsole -x "use auxiliary/scanner/http/joomla_version; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
cms_specific = joomla

[usemulti_msf_joomla_pages]
name = MSF_Joomla_Pages
tool_ref_name = metasploit
category = cms_scanner
description = Metasploit module - Scans a Joomla install for common pages - auxiliary/scanner/http/joomla_pages
command = sudo msfconsole -x "use auxiliary/scanner/http/joomla_pages; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
cms_specific = joomla

[usemulti_msf_joomla_plugins]
name = MSF_Joomla_Plugins
tool_ref_name = metasploit
category = cms_scanner
description = Metasploit module - Joomla install for plugins and potential vulnerabilities - auxiliary/scanner/http/joomla_plugins
command = sudo msfconsole -x "use auxiliary/scanner/http/joomla_plugins; set RHOSTS [HOST]; set RPORT [PORT]; [SSL option="set SSL true"]; run; exit"
cms_specific = joomla

[tool_vbscan]
name = VBscan
category = cms_scanner
description = Detect VBulletin CMS vulnerabi
command = perl vbscan.pl [URL]
install = git clone https://github.com/rezasp/vbscan.git .
update = git pull
cms_specific = vbulletin


#########################################################################################
# Resources Discovery
#########################################################################################
[tool_opendoor]
name = OpenDoor
category = resources_discovery
description = Scans the site directories and find all possible ways to login, index of dirs and entry points
command = python3 opendoor.py --host [HOST] -p [PORT] --scan directories --accept-cookies --reports [OUTPUTDIR]
install = git clone https://github.com/stanislav-web/OpenDoor.git . && sudo pip install -r requirements.txt && chmod +x opendoor.py
update = python3 opendoor.py --update 

[tool_wfuzz]
name = Wfuzz
category = resources_discovery
description = Web
command = python wfuzz.py -c -z file,[WORDLISTSDIR]/services/http/path_technos.txt --hc 404 [URL]FUZZ 2>&1 | tee [OUTPUT] && python wfuzz.py -c -z file,[WORDLISTSDIR]/services/http/path_cms.txt --hc 404 [URL]FUZZ 2>&1 | tee -a [OUTPUT]
install = git clone https://github.com/xmendez/wfuzz.git .
update = git pull


#########################################################################################
# Advanced Web Scanner
#########################################################################################
[tool_skipfish]
name = Skipfish
category = advanced_webscanner
description = Web application security scanner by Google - Medium wordlist - Should be started in new tab/window
command = skipfish -b f -W [WORDLISTSDIR]/services/http/skipfish/medium.wl -o [OUTPUTDIR] [URL]

